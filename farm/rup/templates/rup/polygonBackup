{%block head%}{%endblock%}
<!-- <html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta charset="utf-8">
    <title>Simple Polygon</title>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous"> -->

    <title>Farm Manager</title>
    </head>
    <style>

      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */

      #map {
        height: 80%;
      }
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }

      .select_style{
        width: 225px;
        overflow-x: auto;
      }
      .option_style{
        /* display: flex;
        justify-content: flex-end; */
        width: 200px;
        overflow-x: scroll;
        background-color: blue;
      }

      #selection{
        display: flex;
        align-items: flex-start;
        justify-content: flex-start;
      }

    </style>
  </head>

  <body>
    <div id="map"></div>

    <!-- Button trigger modal -->
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
      Launch demo modal
    </button>


    <!-- Modal -->
    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="SiteName"></h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <!--This submission will take the pesticide selection and fill populate the fields in the modal with the information in the Pesticide of that specific chemical-->
            <h5>Product</h5>
            <div id= selection></div>
            <button id="submit" type="submit" value = 'submit' name="pesticide">Apply</button>
            <hr>
            <button id=popover_product type="button" class="btn btn-lg btn-danger" data-toggle="popover" title="Restricted use" data-content="" >Why is this dangerous</button>
            <hr>

            <h5>Tooltips in a modal</h5>
            <p><a href="#" class="tooltip-test" title="Tooltip">This link</a> and <a href="#" class="tooltip-test" title="Tooltip">that link</a> have tooltips on hover.</p>
            <hr>
            <h5>Tooltips in a modal</h5>
            <p>{{pesticide.rei}}</p>

          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary">Save changes</button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>

  </body>

  <script type='text/javascript'>





    var primaryKeys = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,];
    var siteColors = ['000000', '#FF0000', '#7CFC00']
    var siteNames = ['Range12 B3', 'Range12 B2', 'Range12 B1', 'Range11 Z2', 'Range11 Z1', 'Range10 oc6','Range10 Z2','Range10 Z1', 'Range13 Z1', 'Range13 Z2'];

    var siteVertices_1 = [ 45.146490, -122.757545, 45.146770, -122.757545, 45.146770, -122.757665, 45.146490, -122.757665, 45.146490, -122.757545 ];
    var siteVertices_2 = [ 45.146490, -122.757800, 45.146770, -122.757800, 45.146770, -122.757665, 45.146490, -122.757665, 45.146490, -122.757800 ];
    var siteVertices_3 = [ 45.146490, -122.757916, 45.146770, -122.757916, 45.146770, -122.757800, 45.146490, -122.757800, 45.146490, -122.757916 ];
    var siteVertices_4 = [ 45.146409, -122.758053, 45.146409, -122.758274, 45.146728, -122.758270, 45.146726, -122.758275, 45.146726, -122.758041 ];
    var siteVertices_5 = [ 45.146722, -122.758278, 45.146728, -122.758629, 45.146414, -122.758628, 45.146412, -122.758290, 45.146722, -122.758278 ];
    var siteVertices_6 = [ 45.146709, -122.758642, 45.146424, -122.758637, 45.146430, -122.758806, 45.146711, -122.758797, 45.146709, -122.758642 ];
    var siteVertices_7 = [ 45.146740, -122.759030, 45.146740, -122.758816, 45.146429, -122.758816, 45.146443, -122.759032, 45.146740, -122.759030 ];
    var siteVertices_8 = [ 45.146744, -122.759035, 45.146438, -122.759038, 45.146445, -122.759351, 45.146738, -122.759344, 45.146744, -122.759035 ];
    var siteVertices_9 = [ 45.146755, -122.758611, 45.147017, -122.758600, 45.147019, -122.758329, 45.146765, -122.758335, 45.146755, -122.758611 ];
    var siteVertices_10 = [ 45.146755, -122.758041, 45.146757, -122.758322, 45.147019, -122.758313, 45.147015, -122.758047, 45.146755, -122.758041 ];
    // var verticesArray = []

    var i = 0;
    // var pk = 0;
    function initMap() {
      var map = new google.maps.Map(document.getElementById('map'), {
        zoom: 18,
        minZoom: 18,
        maxZoom: 18,
        center: {lat: 45.147124, lng: -122.760927},
        mapTypeId: 'satellite',
        zoomControl: false,
        streetViewControl: false,
        fullscreenControl: false,
        mapTypeControl: false,
      })

      var greenhousePolygon;
        for (let k = 0; k < primaryKeys.length; k++) {
          pk = primaryKeys[k];

          verticesArray = new Array(( eval("siteVertices_" + primaryKeys[k]).length) / 2);

          var m = 0;
          var centroidLat = 0;
          var centroidLng = 0;

          for (var n = 0; n < eval("siteVertices_" + pk).length; n += 2){
              verticesArray[m] = new google.maps.LatLng(eval("siteVertices_" + pk)[n], eval("siteVertices_" + pk)[n + 1]);
              m++;
              centroidLat += eval("siteVertices_" + pk)[n];
              centroidLng += eval("siteVertices_" + pk)[n + 1];
          }

          var cent = new google.maps.LatLng(centroidLat/m, centroidLng/m);

          var greenhousePolygon = new google.maps.Polygon({
              paths: verticesArray,
              strokeColor: "#FF0000",
              strokeOpacity: 0.5,
              strokeWeight: 1,
              fillColor: '#000000',
              fillOpacity: 0.20,
              position: cent,
              map:map });

          click(greenhousePolygon, i, pk, siteNames, primaryKeys);
          }
        }

      $(".btn-primary").hide();
      function click(overlay, i, primaryKeys, siteNames) {
        google.maps.event.addListener(overlay, 'click', function(){
            $('#map, primaryKeys, siteNames').on('dblclick', function (e) {
              $('#exampleModalCenter').modal('toggle');
              $("#SiteName").text(siteNames[primaryKeys-1])
              })

          if (siteColors[i] == siteColors[i]){i++;}
            overlay.setOptions({fillColor:siteColors[i]});
          if (i == siteColors.length){i %= siteColors.length}
        })
      }

      $(function () {
      $('[data-toggle="popover"]').popover()
      })

      var selection = document.querySelector("#selection")
      var select = document.createElement("select")
      select.classList.add('select_style')
      var myFrag = document.createDocumentFragment()
      var d = 0
      {% for pesticide in pesticides %}
        var option = document.createElement("option")
        option.text = "{{pesticide.product_name}}"
        option.value = d++

        myFrag.appendChild(option)
      {%endfor%}
      select.appendChild(myFrag)
      selection.appendChild(select)


      let btn = document.querySelector("#submit")
      btn.onclick = function(){
        var selector = document.querySelector('.select_style')
        var text = selector[selector.selectedIndex].text;

        let config = {
          headers: {
            'X-CSRFToken': '{{ csrf_token }}'
          }
        }
        axios.get('{% url 'rup:get_product' %}', config)
        .then(function(response) {
          var data = response.data;

          for (let i=0; i < data.products.length; i++) {
            if (text == data.products[i].product_name){
              console.log(data.products[i].product_name)
              var popover = $('.btn-danger').data('bs.popover');
              $('button').attr('data-content', data.products[i].rui);
              popover.setContent();
              // popover.$tip.addClass(popover.options.placement);
              // $('[data-content=[data.products[i].product_name]]').popover()


            }
          }
        })
      }


    </script>


    <script src="https://maps.googleapis.com/maps/api/js?key={{SECRET_KEY_GOOGLE}}&callback=initMap&libraries=drawing,geometry" async defer>
    </script>


</html>
